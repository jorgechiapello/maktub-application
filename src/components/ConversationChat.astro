---
interface Message {
  id: number;
  sender: string;
  content: string;
  timestamp: string;
  type: string;
}

interface Props {
  messages: Message[];
}

const { messages } = Astro.props;

const predefinedMessages = [
  'Te veo pronto 😍',
  'Falta poco para vernos',
  'Te quiero conocer ❤️',
  '🙋🏻'
];

---

<div class="bg-white rounded-lg shadow-md p-6">
  <div class="space-y-4 mb-6 max-h-[500px] overflow-y-auto">
    {
      messages.map((message) => (
        <div class="flex flex-col">
          <div
            class:list={[
              'flex',
              message.sender === 'You' ? 'justify-end' : 'justify-start',
            ]}
          >
            <div
              class:list={[
                'max-w-[70%] rounded-lg p-3',
                message.sender === 'You' && message.type === 'regular'
                  ? 'bg-primary text-white'
                  : 'bg-gray-100 text-gray-900',
                message.type === 'invitation'
                  ? 'border border-primary bg-red-100 text-black'
                  : '',
                message.type === 'acceptance'
                  ? 'bg-green-100 text-green-800'
                  : '',
              ]}
            >
              <p>{message.content}</p>
              <p
                class:list={[
                  'text-xs mt-1',
                  message.sender === 'You' ? 'text-primary-100' : 'text-gray-500',
                ]}
              >
                {message.timestamp}
              </p>
            </div>
          </div>
          {message.type === 'invitation' && message.sender !== 'You' && (
            <div class="flex flex-col items-start gap-2 mt-2 ml-4">
              <button class="bg-green-500 text-white px-3 py-1 rounded">
                Aceptado
              </button>
              <button class="bg-orange-50 text-black px-3 py-1 rounded border-2 border-orange-500">
                Reagendar
              </button>
              <button class="bg-red-50 text-black px-3 py-1 rounded border-2 border-red-500">
                Negar
              </button>
            </div>
          )}
        </div>
      ))
    }
  </div>

  <div class="mt-4">
    <form id="messageForm" class="flex flex-row gap-2">
      <div class="flex-grow min-w-0">
        <select
          id="messageSelect"
          class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          required
        >
          <option value="">Selecciona un mensaje...</option>
          {
            predefinedMessages.map((message) => (
              <option value={message}>{message}</option>
            ))
          }
        </select>
      </div>
      <button
        type="submit"
        class="shrink-0 bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors"
      >
        Enviar
      </button>
    </form>

    <script>
      const messageForm = document.getElementById(
        'messageForm',
      ) as HTMLFormElement;
      const messageSelect = document.getElementById(
        'messageSelect',
      ) as HTMLSelectElement;
      const messagesContainer = document.querySelector(
        '.space-y-4',
      ) as HTMLDivElement;

      if (messageForm && messageSelect && messagesContainer) {
        messageForm.addEventListener('submit', (e) => {
          e.preventDefault();

          const selectedMessage = messageSelect.value;
          if (!selectedMessage) return;

          const currentTime = new Date().toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
          });

          const messageHTML = `
                        <div class="flex justify-end">
                            <div class="max-w-[70%] rounded-lg p-3 bg-primary text-white">
                                <p>${selectedMessage}</p>
                                <p class="text-xs mt-1 text-primary-100">${currentTime}</p>
                            </div>
                        </div>
                    `;

          messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
          messageSelect.value = '';
        });
      }
    </script>
  </div>
</div>
