---
interface Props {
  matchId: number;
  matchName: string;
}

const { matchId, matchName } = Astro.props;

const timeSlots = [];
for (let hour = 19; hour <= 24; hour++) {
  const startTime = `${hour}:00`;
  const endTime = `${hour + 1 === 25 ? 1 : hour + 1}:00`;
  timeSlots.push({ startTime, endTime });
}

const days = [];
const currentDate = new Date();
const currentDay = currentDate.getDay(); // 0 = Sunday, 1 = Monday, ...
const mondayOffset = currentDay === 0 ? -6 : 1 - currentDay; // If Sunday, go back 6 days, otherwise go back to Monday

const monday = new Date(currentDate);
monday.setDate(currentDate.getDate() + mondayOffset);

for (let i = 0; i < 7; i++) {
  const date = new Date(monday);
  date.setDate(monday.getDate() + i);
  days.push({
    date: date,
    dayName: new Intl.DateTimeFormat('es', { weekday: 'long' }).format(date),
    dayNumber: date.getDate(),
  });
}
---

<div class="bg-white rounded-lg shadow-lg p-6" id="calendar-container" data-match-id={matchId}>
  <div class="mb-6 text-center">
    <h2 class="text-2xl font-bold text-gray-900">
      Programa una cita con {matchName}
    </h2>
    <p class="text-gray-600 mt-2">
      Haz clic en múltiples horarios para indicar tu disponibilidad
    </p>
    <p class="text-sm text-primary mt-1">
      (Puedes seleccionar varios horarios)
    </p>
  </div>

  <div class="mb-4 space-y-3">
    {/* Days with time slots */}
    {days.map((day) => (
      <div class="day-container">
        <div class="day-header mb-1 pb-1 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-800 capitalize">
            {day.dayName} {day.dayNumber}
          </h3>
        </div>
        <div class="time-slots-row flex flex-wrap gap-2">
          {timeSlots.map((slot) => {
            const slotId = `${day.date.toISOString().split('T')[0]}T${slot.startTime}`;
            return (
              <div
                class="time-slot px-3 py-1 border-2 rounded-lg cursor-pointer transition-all duration-200 border-gray-200 w-36 text-center text-sm"
                data-slot-id={slotId}
              >
                {slot.startTime} - {slot.endTime}
              </div>
            );
          })}
        </div>
      </div>
    ))}
  </div>

  <div
    id="selected-slots"
    class="mb-4 p-3 bg-gray-50 rounded-lg shadow-sm hidden"
  >
    <div class="mb-2">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold text-gray-900">
          Horarios seleccionados
        </h3>
      </div>
      <div class="mt-1">
        <span
          id="slots-counter"
          class="px-2 py-0.5 bg-primary text-white rounded-full text-xs font-medium"
          >0 seleccionados</span
        >
      </div>
    </div>
    <div id="selected-slots-list" class="space-y-2"></div>
  </div>

  <div class="flex justify-end space-x-3">
    <a
      href="/app"
      class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
    >
      Cancelar
    </a>
    <button
      id="confirm-button"
      class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      Confirmar horarios
    </button>
  </div>
</div>

<script>
  let selectedSlots = new Set();

  
  function updateSelectedSlotsDisplay() {
    const elements = {
      container: document.getElementById('selected-slots'),
      list: document.getElementById('selected-slots-list'),
      button: document.getElementById('confirm-button'),
      counter: document.getElementById('slots-counter')
    };
    
    if (!elements.container || !elements.list || !elements.button || !elements.counter) return;
    
    const selectedArray = Array.from(selectedSlots);
    const hasSlots = selectedArray.length > 0;
    
    elements.container.classList.toggle('hidden', !hasSlots);
    elements.button.disabled = !hasSlots;
    
    elements.counter.textContent = `${selectedArray.length} ${selectedArray.length === 1 ? 'seleccionado' : 'seleccionados'}`;
    
    elements.list.innerHTML = hasSlots ? 
      selectedArray
        .sort()
        .map(slot => {
          const [date, startTime] = slot.split('T');
          const slotDate = new Date(date);
          const dayName = new Intl.DateTimeFormat('es', { weekday: 'long' })
            .format(slotDate)
            .replace(/^\w/, c => c.toUpperCase());
          
          // Calculate end time
          const [hour] = startTime.split(':');
          const endHour = parseInt(hour) + 1 === 25 ? 1 : parseInt(hour) + 1;
          const endTime = `${endHour}:00`;
          
          return `
            <div class="text-gray-700 p-2 border-b border-gray-100">
              <span><strong>${dayName}</strong> de <strong>${startTime}</strong> a <strong>${endTime}</strong></span>
            </div>
          `;
        })
        .join('') 
      : '';
  }

  function initializeCalendar() {
    setupTimeSlots();
    setupConfirmButton();
    updateSelectedSlotsDisplay();
  }
  
  function setupTimeSlots() {
    document.querySelectorAll('.time-slot').forEach(slot => {
      slot.removeEventListener('click', handleSlotClick);
      
      slot.addEventListener('click', handleSlotClick);
    });
  }
  
  function handleSlotClick(event) {
    event.preventDefault();
    event.stopPropagation();
    
    const slot = event.currentTarget;
    const slotId = slot.dataset.slotId;
    
    if (!slotId) return;
    
    if (selectedSlots.has(slotId)) {
      selectedSlots.delete(slotId);
      slot.classList.remove('bg-primary', 'text-white', 'border-primary');
    } else {
      selectedSlots.add(slotId);
      slot.classList.add('bg-primary', 'text-white', 'border-primary');
    }
    
    updateSelectedSlotsDisplay();
  }
  
  function setupConfirmButton() {
    const confirmButton = document.getElementById('confirm-button');
    if (!confirmButton) return;
    
    confirmButton.removeEventListener('click', handleConfirmClick);
    confirmButton.addEventListener('click', handleConfirmClick);
  }
  
  function handleConfirmClick() {
    if (selectedSlots.size === 0) {
      alert('Por favor, selecciona al menos un horario');
      return;
    }
    
    alert('¡Horarios confirmados con éxito!');
    window.location.href = '/app';
  }


  
  document.addEventListener('DOMContentLoaded', initializeCalendar);
  document.addEventListener('astro:page-load', initializeCalendar);
  
  initializeCalendar();
</script>
