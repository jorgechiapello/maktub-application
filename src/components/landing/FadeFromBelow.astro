---
interface Props {
  delay?: number; // Delay in milliseconds before animation starts
  duration?: number; // Duration of animation in milliseconds
  threshold?: number; // Threshold for intersection observer (0-1)
}

const { 
  delay = 300, 
  duration = 2000, 
  threshold = 0.1 
} = Astro.props;
---

<div class="fade-from-below" data-delay={delay} data-duration={duration}>
  <slot />
</div>

<style>
  .fade-from-below {
    opacity: 0;
    transform: translateY(80px);
    transition-property: opacity, transform;
    transition-timing-function: ease-out;
    will-change: opacity, transform;
  }

  .fade-from-below.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script define:vars={{ delay, duration, threshold }} >
  // Initialize intersection observer to detect when elements enter viewport
  document.addEventListener('DOMContentLoaded', () => {
    const fadeElements = document.querySelectorAll('.fade-from-below');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Apply transition duration dynamically
          entry.target.style.transitionDuration = `${duration}ms`;
          
          // Delay the animation if specified
          setTimeout(() => {
            entry.target.classList.add('visible');
          }, delay);
          
          // Unobserve after animation is triggered
          observer.unobserve(entry.target);
        }
      });
    }, { 
      threshold,
      rootMargin: '0px 0px -50px 0px' // Trigger slightly before element enters viewport
    });
    
    // Observe all fade elements
    fadeElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>