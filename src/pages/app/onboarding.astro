---
import MainLayout from '@layouts/AppMainLayout.astro';
import LoveLoadingAnimation from '@components/LoveLoadingAnimation.astro';

import { preferenceQuestions, type Question } from '../../data/questions';

const profileQuestions: Question[] = [
  {
    id: 'name',
    question: "¿Cómo es tu nombre completo?",
    category: 'profile',
  },
  {
    id: 'age',
    question: "¿Cuál es tu edad?",
    category: 'profile',
  },
  // {
  //   id: 'job',
  //   question: "¿Cuál es tu ocupación?",
  //   category: 'profile',
  // },
];
const questions = [ ...profileQuestions,...preferenceQuestions];

---

<MainLayout title="Onboarding">
  <div id="loadingContainer" class="hidden">
    <LoveLoadingAnimation message="Preparando tu experiencia personalizada..." />
  </div>

  <div class="max-w-2xl mx-auto mt-10 px-4 sm:px-6 lg:px-8" id="onboardingContainer">

    <div class="bg-white shadow-xl rounded-lg p-6">
      <div class="mb-8">
        <div class="w-full bg-gray-200 rounded-full h-2">
          <div
            id="progress-bar"
            class="bg-primary rounded-full h-2 transition-all duration-500 w-0"
          />
        </div>
        <div class="flex justify-between mt-2">
          <p id="question-counter" class="text-sm text-gray-600">Pregunta 1 de {questions.length}</p>
        </div>
      </div>

      <form id="onboardingForm" class="space-y-8" onsubmit="return false;">
        {questions.map((q, index) => (
          <div 
            id={`personal-question-${q.id}`} 
            class="personal-question-section space-y-4"
            data-question-id={q.id}
            style={index === 0 ? "" : "display: none;"}
          >
            <h2 class="text-2xl font-semibold text-gray-900">{index === 0 ? `Bienvenido! A continuación, completaremos un cuestionario de ${questions.length} preguntas.` : ""}</h2>
            <div class="space-y-4">
              <label for={q.id.toString()} class="block text-sm font-medium text-gray-700">{q.question}</label>
              {!q.options ? (
                <input 
                  type="text"
                  name={q.id.toString()} 
                  id={q.id.toString()} 
                  required 
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm" 
                />
              ) : (
                <div class="grid gap-4">
                  {q.options?.map((option) => (
                    <button
                      type="button"
                      class="w-full text-left px-4 py-3 border border-gray-300 rounded-lg
                             hover:border-primary hover:bg-primary/5 transition-colors
                             focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                      data-question-id={q.id}
                      data-option={option}
                    >
                      {option}
                    </button>
                  ))}
                </div>
                <input type="hidden" name={q.id.toString()} id={q.id.toString()} required />
              )}
            </div>
          </div>
        ))}
        <div class="flex justify-between">
          <button 
            type="button" 
            id="prev-button"
            class="hidden px-6 py-2 text-gray-600 hover:text-gray-900 focus:outline-none"
          >
            Anterior
          </button>
          <button 
            type="button" 
            id="next-button"
            class="ml-auto bg-primary text-white py-2 px-6 rounded-md hover:bg-primary-dark 
                   focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
          >
            Siguiente
          </button>
        </div>
      </form>
    </div>

      <div id="progress-message" class="text-center mt-4 opacity-0 -translate-y-4 transition-all duration-500 ease-out">
        <p class="text-green-700 font-bold text-lg shadow-sm p-2 bg-green-50 rounded-md inline-block">¡Solo unas pocas preguntas más!</p>
      </div>
  </div>
</MainLayout>

<script define:vars={{ questions }}>
  let currentStep = 0;
  const totalSteps = questions.length;

  const profileAnswers = {};
  const preferenceAnswers = {};

  const progressBar = document.getElementById('progress-bar');
  const nextButton = document.getElementById('next-button');
  const prevButton = document.getElementById('prev-button');
  const personalQuestionSections = document.querySelectorAll('.personal-question-section');
  const questionSections = document.querySelectorAll('.question-section');

  document.addEventListener('DOMContentLoaded', () => {
    try {
      updateProgress();
    } catch (error) {
      console.error('Error checking onboarding status:', error);
    }
  });

  // Update progress bar and question counter
  function updateProgress() {
    const progress = (currentStep / (totalSteps - 1)) * 100;
    if (progressBar) progressBar.style.width = `${progress}%`;
    
    // Update question counter
    const questionCounter = document.getElementById('question-counter');
    if (questionCounter) {
      questionCounter.textContent = `Pregunta ${currentStep + 1} de ${totalSteps}`;
    }
    
    // Update progress message
    const progressMessage = document.getElementById('progress-message');
    if (progressMessage) {
      // Show message when user has completed 75% of questions
      if (progress >= 75 && progress < 100) {
        // Apply top-down animation when showing
        progressMessage.classList.add('opacity-100', 'translate-y-0');
      } else {
        // Hide with animation
        progressMessage.classList.remove('opacity-100', 'translate-y-0');
      }
    }
  }

  // Show/hide sections based on current step
  function updateVisibility() {
    console.log('Updating visibility for step:', currentStep);
    
    // Handle personal questions (first set of questions)
    personalQuestionSections.forEach((section, index) => {
      section.style.display = index === currentStep ? 'block' : 'none';
    });

    // Handle preference questions (second set of questions)
    questionSections.forEach((section, index) => {
      section.classList.toggle('hidden', index + personalQuestionSections.length !== currentStep);
    });

    // Update button visibility
    if (prevButton) prevButton.classList.toggle('hidden', currentStep === 0);
    if (nextButton) {
      nextButton.textContent = currentStep === totalSteps - 1 ? 'Completar' : 'Siguiente';
    }
  }

  // Handle option selection for all sections
  personalQuestionSections.forEach(section => {
    const buttons = section.querySelectorAll('button[data-option]');
    const input = section.querySelector('input[type="hidden"]');
    
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const option = button.getAttribute('data-option');
        
        // Update hidden input value
        if (input) {
          input.value = option;
        }

        // Remove active state from all buttons in this section
        buttons.forEach(b => b.classList.remove('bg-primary/5', 'border-primary'));
        // Add active state to selected button
        button.classList.add('bg-primary/5', 'border-primary');
      });
    });
  });

  // Prevent form submission on enter
  document.getElementById('onboardingForm')?.addEventListener('submit', (e) => {
    e.preventDefault();
    return false;
  });

  // Handle navigation
  nextButton?.addEventListener('click', () => {
    console.log('Current step:', currentStep, 'Total steps:', totalSteps);
    
    // Get the current section and question data
    const currentSection = personalQuestionSections[currentStep];
    const questionId = currentSection.getAttribute('data-question-id');
    const currentQuestion = questions.find(q => q.id.toString() === questionId);
    
    if (!currentQuestion) {
      console.error('Question not found:', questionId);
      return;
    }

    // Find input in this section
    const input = currentSection.querySelector('input');
    
    // Validate
    if (!input || !input.value.trim()) {
      const buttons = currentSection.querySelectorAll('button');
      buttons.forEach(b => b.classList.add('border-red-500'));
      alert('Por favor, selecciona una opción');
      return;
    }
    
    if (currentQuestion.category === 'profile') {
      profileAnswers[questionId] = input.value;
    } else {
      preferenceAnswers[questionId] = input.value;
    }
  
    const buttons = currentSection.querySelectorAll('button');
    buttons.forEach(b => b.classList.remove('border-red-500'));
    const answer = input.value.trim();
    
    if (currentQuestion.category === 'profile') {
      profileAnswers[questionId] = answer;
    } else if (currentQuestion.category === 'preference') {
      preferenceAnswers[questionId] = answer;
    }

    if (currentStep === questions.length - 1) {
      try {
        localStorage.setItem('profileAnswers', JSON.stringify(profileAnswers));
        localStorage.setItem('preferenceAnswers', JSON.stringify(preferenceAnswers));
        
        window.location.href = '/app';
      } catch (error) {
        console.error('Error saving onboarding data:', error);
        alert('There was an error saving your information. Please try again.');
      }
    } else {
      currentStep++;
      updateVisibility();
      updateProgress();
    }
  });

  prevButton?.addEventListener('click', () => {
    if (currentStep > 0) {
      currentStep--;
      updateVisibility();
      updateProgress();
    }
  });
  
  updateVisibility();
  updateProgress();
</script>
